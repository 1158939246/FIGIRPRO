[
    {
        "tool_name": "extract_keywords",
        "keywords": [
            "singers",
            "born before 1980",
            "earn $355 per concert",
            "singers born after 1980",
            "earn $228 per concert",
            "Justin Brown",
            "John Nizinik",
            "3 years older",
            "Somerset Park stadium",
            "age",
            "date of birth",
            "given date",
            "concerts",
            "paying the singers"
        ],
        "status": "success",
        "execution_time": 7.2
    },
    {
        "tool_name": "retrieve_entity",
        "similar_columns": {
            "concert": [
                "Year"
            ],
            "singer": [
                "Age"
            ]
        },
        "schema_with_examples": {
            "stadium": {
                "Name": [
                    "Somerset Park"
                ]
            },
            "singer": {
                "Name": [
                    "Justin Brown",
                    "John Nizinik"
                ]
            }
        },
        "status": "success",
        "execution_time": 3.4
    },
    {
        "tool_name": "retrieve_context",
        "schema_with_descriptions": {},
        "status": "success",
        "execution_time": 166.0
    },
    {
        "tool_name": "filter_column",
        "tentative_schema": {
            "stadium": [
                "Name"
            ],
            "singer": [
                "Singer_ID",
                "Name",
                "Age"
            ],
            "concert": [
                "Stadium_ID",
                "Year"
            ],
            "singer_in_concert": [
                "concert_ID",
                "Singer_ID"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'",
            "'concert'.'concert_id'",
            "'stadium'.'stadium_id'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 8.1
    },
    {
        "tool_name": "select_tables",
        "chain_of_thought_reasoning": "To answer the question about the total amount spent on paying singers for concerts held in Somerset Park stadium, we need to gather information from multiple tables. First, we need the 'stadium' table to identify the concerts held in Somerset Park. Next, the 'concert' table is essential to link the concerts to their respective stadiums and to find out which concerts took place there. The 'singer' table is necessary to determine the ages of the singers, as their payment depends on whether they were born before or after 1980. Finally, the 'singer_in_concert' table is crucial to connect the singers to the specific concerts they performed in, allowing us to calculate the total payment based on the number of concerts and the age-based payment rates. Therefore, all four tables are required to construct the SQL query that answers the question effectively.",
        "selected_tables": [
            "stadium",
            "concert",
            "singer",
            "singer_in_concert"
        ],
        "tentative_schema": {
            "stadium": [
                "Name"
            ],
            "concert": [
                "Stadium_ID",
                "Year"
            ],
            "singer": [
                "Singer_ID",
                "Name",
                "Age"
            ],
            "singer_in_concert": [
                "concert_ID",
                "Singer_ID"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'",
            "'concert'.'concert_id'",
            "'stadium'.'stadium_id'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 2.3
    },
    {
        "tool_name": "select_columns",
        "chain_of_thought_reasoning": "To determine the total amount spent on paying singers for concerts held in Somerset Park, we need to identify the relevant columns that provide information about the concerts, the singers, and their respective earnings based on their ages. The 'stadium' table is essential to filter concerts held in Somerset Park. The 'concert' table links concerts to stadiums and provides the concert IDs. The 'singer' table contains the ages of the singers, which is crucial for calculating their earnings based on whether they were born before or after 1980. The 'singer_in_concert' table connects singers to specific concerts, allowing us to calculate the total payment for each singer based on their age and the number of concerts they participated in.",
        "selected_columns": {
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "singer": [
                "Name",
                "Age",
                "Singer_ID"
            ],
            "stadium": [
                "Name",
                "Stadium_ID"
            ],
            "singer_in_concert": [
                "Singer_ID",
                "concert_ID"
            ]
        },
        "tentative_schema": {
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "singer": [
                "Name",
                "Age",
                "Singer_ID"
            ],
            "stadium": [
                "Name",
                "Stadium_ID"
            ],
            "singer_in_concert": [
                "Singer_ID",
                "concert_ID"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 2.3
    },
    {
        "tool_name": "generate_candidate",
        "node_type": "generate_candidate",
        "generation_based_candidates": [
            {
                "template_name": "generate_candidate_one",
                "candidates": [
                    " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') ",
                    " SELECT SUM(CASE WHEN (2023 - singer.Age) < 43 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' ",
                    " SELECT SUM(CASE WHEN (2023 - singer.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' "
                ]
            }
        ],
        "candidates": [
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') ",
                "plan": "**Question**: Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** How much was spent on paying the singers for the concerts held in Somerset Park stadium?\n    * **Analysis:** We need to calculate the total payment for singers based on their age and the concerts they performed at Somerset Park. This involves determining the payment rate based on their birth year and summing the total for all relevant concerts.\n    * **Pseudo SQL:** SELECT SUM(<payment>) FROM <singers> INNER JOIN <concerts> WHERE <concerts held in Somerset Park>\n\n    * **Sub-question 1:** Determine payment based on age\n        * **Analysis:** We need to differentiate between singers born before and after 1980 to apply the correct payment rate.\n        * **Pseudo SQL:** CASE WHEN <age> < 43 THEN 355 ELSE 228 END AS payment\n\n    * **Sub-question 2:** Identify concerts held in Somerset Park\n        * **Analysis:** We need to filter concerts based on the stadium name.\n        * **Pseudo SQL:** SELECT concert_ID FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park')\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (payment based on age):**\n    * **SQL:** CASE WHEN (2023 - T1.Age) < 43 THEN 355 ELSE 228 END AS payment\n\n* **Sub-question 2 (concerts held in Somerset Park):**\n    * **SQL:** SELECT concert_ID FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park')\n\n* **Main Question (total payment for concerts):**\n    * **SQL:** SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END) FROM singer AS T3 INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T2.concert_ID IN (SELECT concert_ID FROM concert WHERE Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park'))\n\n**3. Simplification and Optimization:**\n\n* The SQL query can be simplified by directly joining the necessary tables and applying the conditions in a single query without nested subqueries.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN (2023 - singer.Age) < 43 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' ",
                "plan": "**Question**: Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** How much was spent on paying the singers for the concerts held in Somerset Park stadium?\n    * **Analysis:** We need to calculate the total payment for singers based on their age and the number of concerts they performed at Somerset Park. This involves determining the payment rate based on their birth year and summing the total for all relevant concerts.\n    * **Pseudo SQL:** SELECT SUM(<payment>) FROM <singers> INNER JOIN <concerts> INNER JOIN <stadium> WHERE <conditions>\n\n    * **Sub-question 1:** Determine the payment for each singer based on their age.\n        * **Analysis:** We need to check if the singer was born before or after 1980 to determine their payment rate. We can use a CASE statement for this.\n        * **Pseudo SQL:** CASE WHEN <age> < 43 THEN 355 ELSE 228 END AS payment\n\n    * **Sub-question 2:** Identify concerts held in Somerset Park stadium.\n        * **Analysis:** We need to filter concerts based on the stadium name.\n        * **Pseudo SQL:** WHERE stadium.Name = 'Somerset Park'\n\n    * **Sub-question 3:** Join the necessary tables to get the relevant data.\n        * **Analysis:** We need to join the `singer_in_concert`, `concert`, and `stadium` tables to get the necessary information about the concerts and singers.\n        * **Pseudo SQL:** INNER JOIN singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (payment calculation):**\n    * **SQL:** CASE WHEN (2023 - singer.Age) < 43 THEN 355 ELSE 228 END AS payment\n\n* **Sub-question 2 (concerts in Somerset Park):**\n    * **SQL:** WHERE stadium.Name = 'Somerset Park'\n\n* **Sub-question 3 (join tables):**\n    * **SQL:** INNER JOIN singer_in_concert ON singer_in_concert.concert_ID = concert.concert_ID INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID\n\n* **Main Question (total payment):**\n    * **SQL:** SELECT SUM(CASE WHEN (2023 - singer.Age) < 43 THEN 355 ELSE 228 END) FROM singer_in_concert INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE stadium.Name = 'Somerset Park'\n\n**3. Simplification and Optimization:**\n\n* The SQL query from step 2 is already efficient. We have used INNER JOINs to combine the necessary tables and applied the payment calculation directly in the SUM function.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN (2023 - singer.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' ",
                "plan": "**Question**: Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** How much was spent on paying the singers for the concerts held in Somerset Park stadium?\n    * **Analysis:** We need to calculate the total payment for singers based on their age and the concerts they performed at Somerset Park. This involves joining the `singer`, `singer_in_concert`, `concert`, and `stadium` tables. We will apply conditions based on the birth year of the singers to determine their payment rate.\n    * **Pseudo SQL:** SELECT SUM(<payment>) FROM <join tables> WHERE <conditions for Somerset Park> \n\n    * **Sub-question 1:** Determine payment based on age\n        * **Analysis:** We need to calculate the payment based on the age of the singers. We will use a CASE statement to differentiate between singers born before and after 1980.\n        * **Pseudo SQL:** CASE WHEN <age condition> THEN 355 ELSE 228 END\n\n    * **Sub-question 2:** Identify concerts held in Somerset Park\n        * **Analysis:** We need to filter concerts that took place in Somerset Park by joining the `concert` and `stadium` tables.\n        * **Pseudo SQL:** `stadium`.`Name` = 'Somerset Park'\n\n    * **Sub-question 3:** Join necessary tables\n        * **Analysis:** We need to join the `singer`, `singer_in_concert`, `concert`, and `stadium` tables to get the relevant data for the calculations.\n        * **Pseudo SQL:** `singer_in_concert` INNER JOIN `concert` ON `singer_in_concert`.`concert_ID` = `concert`.`concert_ID` INNER JOIN `stadium` ON `concert`.`Stadium_ID` = `stadium`.`Stadium_ID` INNER JOIN `singer` ON `singer_in_concert`.`Singer_ID` = `singer`.`Singer_ID`\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (payment based on age):**\n    * **SQL:** CASE WHEN (2023 - `singer`.`Age`) < 1980 THEN 355 ELSE 228 END\n\n* **Sub-question 2 (concerts held in Somerset Park):**\n    * **SQL:** `stadium`.`Name` = 'Somerset Park'\n\n* **Sub-question 3 (join necessary tables):**\n    * **SQL:** `singer_in_concert` INNER JOIN `concert` ON `singer_in_concert`.`concert_ID` = `concert`.`concert_ID` INNER JOIN `stadium` ON `concert`.`Stadium_ID` = `stadium`.`Stadium_ID` INNER JOIN `singer` ON `singer_in_concert`.`Singer_ID` = `singer`.`Singer_ID`\n\n* **Main Question (total payment):**\n    * **SQL:** SELECT SUM(CASE WHEN (2023 - `singer`.`Age`) < 1980 THEN 355 ELSE 228 END) FROM `singer_in_concert` INNER JOIN `concert` ON `singer_in_concert`.`concert_ID` = `concert`.`concert_ID` INNER JOIN `stadium` ON `concert`.`Stadium_ID` = `stadium`.`Stadium_ID` INNER JOIN `singer` ON `singer_in_concert`.`Singer_ID` = `singer`.`Singer_ID` WHERE `stadium`.`Name` = 'Somerset Park'\n\n**3. Simplification and Optimization:**\n\n* The SQL query from step 2 is already efficient as it uses INNER JOINs to combine the necessary tables and applies the payment calculation directly in the SUM function.\n\n**Final Optimized SQL Query:**\n\n"
            }
        ],
        "status": "success",
        "execution_time": 24.8
    },
    {
        "tool_name": "revise",
        "original_SQL_id": "generate_candidate",
        "refined_SQL_id": "revise_1",
        "candidates": [
            {
                "refined_query": " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') "
            },
            {
                "refined_query": " SELECT SUM(CASE WHEN (2023 - singer.Age) < 43 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' "
            },
            {
                "refined_query": " SELECT SUM(CASE WHEN (2023 - singer.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer_in_concert  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  INNER JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID  INNER JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID  WHERE stadium.Name = 'Somerset Park' "
            }
        ],
        "status": "success",
        "execution_time": 0.1
    },
    {
        "tool_name": "execution_accuracy",
        "generate_candidate": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') "
        },
        "revise_1": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') "
        },
        "final_SQL": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "Singers born before 1980 earn $355 per concert, while singers born after 1980 earn $228 per concert. If Justin Brown is 3 years older than John Nizinik, how much was spent on paying the singers for the concerts held in Somerset Park stadium?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (2023 - T3.Age) < 43 THEN 355 ELSE 228 END)  FROM singer AS T3  INNER JOIN singer_in_concert AS T1 ON T3.Singer_ID = T1.Singer_ID  INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID  WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') "
        },
        "status": "success",
        "execution_time": 0.0
    }
]