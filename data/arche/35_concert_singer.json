[
    {
        "tool_name": "extract_keywords",
        "keywords": [
            "percentage",
            "concerts",
            "three stadiums",
            "highest average attendance rates",
            "Bleeding Love",
            "Glebe Park stadium",
            "attendance rate",
            "attendance amount",
            "capacity of the stadium"
        ],
        "status": "success",
        "execution_time": 1.6
    },
    {
        "tool_name": "retrieve_entity",
        "similar_columns": {
            "stadium": [
                "Highest",
                "Average",
                "Capacity"
            ]
        },
        "schema_with_examples": {
            "stadium": {
                "Name": [
                    "Glebe Park"
                ]
            },
            "concert": {
                "Theme": [
                    "Bleeding Love"
                ]
            },
            "singer": {
                "Song_Name": [
                    "Love"
                ]
            }
        },
        "status": "success",
        "execution_time": 3.0
    },
    {
        "tool_name": "retrieve_context",
        "schema_with_descriptions": {},
        "status": "success",
        "execution_time": 16.8
    },
    {
        "tool_name": "filter_column",
        "tentative_schema": {
            "stadium": [
                "Stadium_ID",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average"
            ],
            "singer": [],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "singer_in_concert": [
                "concert_ID"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'stadium'.'Glebe Park'",
            "'concert'.'theme'",
            "'concert'.'Bleeding Love'"
        ],
        "correct_columns": {
            "stadium": [
                "stadium_id",
                "name",
                "Glebe Park",
                "capacity",
                "average"
            ],
            "concert": [
                "stadium_id",
                "theme",
                "Bleeding Love"
            ]
        },
        "status": "success",
        "execution_time": 3.4
    },
    {
        "tool_name": "select_tables",
        "chain_of_thought_reasoning": "To answer the question about the percentage of concerts that took place in the three stadiums with the highest average attendance rates, we need to gather information from multiple tables. The 'stadium' table is essential because it contains the average attendance rates and the capacity of each stadium, which are necessary for calculating the attendance rate. The 'concert' table is required to link concerts to their respective stadiums and to identify which concerts occurred in those stadiums. The 'singer_in_concert' table may also be relevant if we need to confirm the specific concert 'Bleeding Love' and its associated stadium. Therefore, the selected tables are 'stadium', 'concert', and 'singer_in_concert'.",
        "selected_tables": [
            "stadium",
            "concert",
            "singer_in_concert"
        ],
        "tentative_schema": {
            "stadium": [
                "Stadium_ID",
                "Name",
                "Capacity",
                "Highest",
                "Lowest",
                "Average"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "singer_in_concert": [
                "concert_ID"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'stadium'.'Glebe Park'",
            "'concert'.'theme'",
            "'concert'.'Bleeding Love'"
        ],
        "correct_columns": {
            "stadium": [
                "stadium_id",
                "name",
                "Glebe Park",
                "capacity",
                "average"
            ],
            "concert": [
                "stadium_id",
                "theme",
                "Bleeding Love"
            ]
        },
        "status": "success",
        "execution_time": 5.8
    },
    {
        "tool_name": "select_columns",
        "chain_of_thought_reasoning": "To determine the percentage of concerts that took place in the three stadiums with the highest average attendance rates, we need to gather data on concert attendance and stadium capacity. The 'Average' column from the 'stadium' table is essential for identifying the top three stadiums based on attendance rates. The 'Capacity' column from the 'stadium' table is necessary to calculate the attendance rate. The 'concert_ID' from the 'concert' table is needed to link concerts to their respective stadiums, and the 'Stadium_ID' from both the 'concert' and 'stadium' tables is required to establish this relationship. Additionally, the 'concert_ID' from the 'singer_in_concert' table is needed to filter concerts related to the theme 'Bleeding Love'.",
        "selected_columns": {
            "singer_in_concert": [
                "concert_ID"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "stadium": [
                "Stadium_ID",
                "Average",
                "Capacity"
            ]
        },
        "tentative_schema": {
            "singer_in_concert": [
                "concert_ID"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "stadium": [
                "Stadium_ID",
                "Average",
                "Capacity"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'stadium'.'name'",
            "'stadium'.'Glebe Park'",
            "'concert'.'theme'",
            "'concert'.'Bleeding Love'"
        ],
        "correct_columns": {
            "stadium": [
                "stadium_id",
                "name",
                "Glebe Park",
                "capacity",
                "average"
            ],
            "concert": [
                "stadium_id",
                "theme",
                "Bleeding Love"
            ]
        },
        "status": "success",
        "execution_time": 2.7
    },
    {
        "tool_name": "generate_candidate",
        "node_type": "generate_candidate",
        "generation_based_candidates": [
            {
                "template_name": "generate_candidate_one",
                "candidates": [
                    " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) ",
                    " SELECT (COUNT(CASE WHEN C.Stadium_ID IN (SELECT S.Stadium_ID FROM (SELECT S.Stadium_ID, SUM(S.Capacity) / COUNT(C.concert_ID) AS average_attendance_rate FROM stadium AS S INNER JOIN concert AS C ON S.Stadium_ID = C.Stadium_ID GROUP BY S.Stadium_ID ORDER BY average_attendance_rate DESC LIMIT 3) AS Top3) THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM concert AS C ",
                    " SELECT (COUNT(T1.concert_ID) * 100.0 / (SELECT COUNT(*) FROM concert)) AS percentage FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY (Average * 1.0 / Capacity) DESC LIMIT 3) "
                ]
            }
        ],
        "candidates": [
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) ",
                "plan": "**Question**: What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?  \n**Evidence**: Attendance rate is calculated by dividing attendance amount by the capacity of the stadium.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What percentage of concerts took place in the three stadiums with the highest average attendance rates?\n    * **Analysis:** To find the percentage of concerts in the top three stadiums by average attendance, we need to calculate the total number of concerts and the number of concerts held in those stadiums. The attendance rate is calculated as attendance amount divided by the capacity of the stadium.\n    * **Pseudo SQL:** SELECT (COUNT(`T1`.`concert_ID`) / <total concerts>) * 100 AS percentage FROM `concert` AS `T1` WHERE `Stadium_ID` IN (<top three stadiums>)\n\n    * **Sub-question 1:** total concerts\n        * **Analysis:** This is simply the total count of concerts in the `concert` table.\n        * **Pseudo SQL:** SELECT COUNT(`concert_ID`) FROM `concert`\n\n    * **Sub-question 2:** top three stadiums by average attendance\n        * **Analysis:** We need to calculate the average attendance for each stadium, which requires joining the `stadium` and `concert` tables. The average attendance can be calculated as the total number of concerts divided by the capacity of each stadium. We will then order by this average and select the top three.\n        * **Pseudo SQL:** SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, COUNT(`concert_ID`) * 1.0 / `Capacity` AS `average_attendance` FROM `concert` AS `T1` INNER JOIN `stadium` AS `T2` ON `T1`.`Stadium_ID` = `T2`.`Stadium_ID` GROUP BY `T1`.`Stadium_ID` ORDER BY `average_attendance` DESC LIMIT 3)\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (total concerts):**\n    * **SQL:** SELECT COUNT(`concert_ID`) FROM `concert`\n\n* **Sub-question 2 (top three stadiums by average attendance):**\n    * **SQL:** SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, COUNT(`concert_ID`) * 1.0 / `Capacity` AS `average_attendance` FROM `concert` AS `T1` INNER JOIN `stadium` AS `T2` ON `T1`.`Stadium_ID` = `T2`.`Stadium_ID` GROUP BY `T1`.`Stadium_ID` ORDER BY `average_attendance` DESC LIMIT 3)\n\n* **Main Question (percentage of concerts):**\n    * **SQL:** SELECT (COUNT(`T1`.`concert_ID`) * 1.0 / (SELECT COUNT(`concert_ID`) FROM `concert`)) * 100 AS percentage FROM `concert` AS `T1` WHERE `Stadium_ID` IN (SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, COUNT(`concert_ID`) * 1.0 / `Capacity` AS `average_attendance` FROM `concert` AS `T1` INNER JOIN `stadium` AS `T2` ON `T1`.`Stadium_ID` = `T2`.`Stadium_ID` GROUP BY `T1`.`Stadium_ID` ORDER BY `average_attendance` DESC LIMIT 3))\n\n**3. Simplification and Optimization:**\n\n* The SQL query from step 2 can be simplified by ensuring that we calculate the average attendance directly in the main query without needing to nest the selection of top stadiums.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT (COUNT(CASE WHEN C.Stadium_ID IN (SELECT S.Stadium_ID FROM (SELECT S.Stadium_ID, SUM(S.Capacity) / COUNT(C.concert_ID) AS average_attendance_rate FROM stadium AS S INNER JOIN concert AS C ON S.Stadium_ID = C.Stadium_ID GROUP BY S.Stadium_ID ORDER BY average_attendance_rate DESC LIMIT 3) AS Top3) THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM concert AS C ",
                "plan": "**Question**: What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?  \n**Evidence**: Attendance rate is calculated by dividing attendance amount by the capacity of the stadium.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What percentage of concerts took place in the three stadiums with the highest average attendance rates?\n    * **Analysis:** To find the percentage of concerts in the top three stadiums by average attendance rate, we need to calculate the average attendance rate for each stadium, identify the top three, and then count the concerts held in those stadiums. Finally, we will calculate the percentage of those concerts relative to the total number of concerts.\n    * **Pseudo SQL:** SELECT (COUNT(<concerts in top 3 stadiums>) / COUNT(<total concerts>)) * 100 AS percentage FROM <concerts> WHERE <in top 3 stadiums>\n\n    * **Sub-question 1:** Calculate average attendance rate for each stadium\n        * **Analysis:** The attendance rate is calculated as the total attendance (which we assume is the sum of the `Capacity` for each concert) divided by the `Capacity` of the stadium. We will need to join the `stadium` and `concert` tables to get the necessary data.\n        * **Pseudo SQL:** SELECT `Stadium_ID`, SUM(`Capacity`) / COUNT(`concert_ID`) AS average_attendance_rate FROM `stadium` AS `S` INNER JOIN `concert` AS `C` ON `S`.`Stadium_ID` = `C`.`Stadium_ID` GROUP BY `Stadium_ID` ORDER BY average_attendance_rate DESC LIMIT 3\n\n    * **Sub-question 2:** Count concerts in the top three stadiums\n        * **Analysis:** We will use the results from Sub-question 1 to filter the concerts that took place in those top three stadiums.\n        * **Pseudo SQL:** SELECT COUNT(*) FROM `concert` WHERE `Stadium_ID` IN (SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, SUM(`Capacity`) / COUNT(`concert_ID`) AS average_attendance_rate FROM `stadium` AS `S` INNER JOIN `concert` AS `C` ON `S`.`Stadium_ID` = `C`.`Stadium_ID` GROUP BY `Stadium_ID` ORDER BY average_attendance_rate DESC LIMIT 3))\n\n    * **Sub-question 3:** Count total concerts\n        * **Analysis:** This is straightforward; we just need to count all concerts.\n        * **Pseudo SQL:** SELECT COUNT(*) FROM `concert`\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (average attendance rate for each stadium):**\n    * **SQL:** SELECT `Stadium_ID`, SUM(`Capacity`) / COUNT(`concert_ID`) AS average_attendance_rate FROM `stadium` AS `S` INNER JOIN `concert` AS `C` ON `S`.`Stadium_ID` = `C`.`Stadium_ID` GROUP BY `Stadium_ID` ORDER BY average_attendance_rate DESC LIMIT 3\n\n* **Sub-question 2 (count concerts in the top three stadiums):**\n    * **SQL:** SELECT COUNT(*) FROM `concert` WHERE `Stadium_ID` IN (SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, SUM(`Capacity`) / COUNT(`concert_ID`) AS average_attendance_rate FROM `stadium` AS `S` INNER JOIN `concert` AS `C` ON `S`.`Stadium_ID` = `C`.`Stadium_ID` GROUP BY `Stadium_ID` ORDER BY average_attendance_rate DESC LIMIT 3))\n\n* **Sub-question 3 (count total concerts):**\n    * **SQL:** SELECT COUNT(*) FROM `concert`\n\n* **Main Question (percentage of concerts in top three stadiums):**\n    * **SQL:** SELECT (SELECT COUNT(*) FROM `concert` WHERE `Stadium_ID` IN (SELECT `Stadium_ID` FROM (SELECT `Stadium_ID`, SUM(`Capacity`) / COUNT(`concert_ID`) AS average_attendance_rate FROM `stadium` AS `S` INNER JOIN `concert` AS `C` ON `S`.`Stadium_ID` = `C`.`Stadium_ID` GROUP BY `Stadium_ID` ORDER BY average_attendance_rate DESC LIMIT 3)) / (SELECT COUNT(*) FROM `concert`)) * 100 AS percentage\n\n**3. Simplification and Optimization:**\n\n* The final SQL query can be simplified by combining the counts into a single query that calculates the percentage directly.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT (COUNT(T1.concert_ID) * 100.0 / (SELECT COUNT(*) FROM concert)) AS percentage FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY (Average * 1.0 / Capacity) DESC LIMIT 3) ",
                "plan": "**Question**: What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?  \n**Evidence**: Attendance rate is calculated by dividing attendance amount by the capacity of the stadium.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What percentage of concerts took place in the three stadiums with the highest average attendance rates?\n    * **Analysis:** To find the percentage of concerts in the top three stadiums by average attendance, we need to calculate the total number of concerts and the number of concerts held in those stadiums. The attendance rate is calculated as attendance amount divided by the capacity of the stadium.\n    * **Pseudo SQL:** SELECT (COUNT(<concerts in top 3 stadiums>) / COUNT(<total concerts>)) * 100 AS percentage FROM <concerts>\n\n    * **Sub-question 1:** concerts in the top 3 stadiums\n        * **Analysis:** We need to find the three stadiums with the highest average attendance rates. This requires calculating the average attendance for each stadium and then selecting the top three.\n        * **Pseudo SQL:** SELECT `Stadium_ID` FROM `stadium` ORDER BY (`Average` / `Capacity`) DESC LIMIT 3\n\n    * **Sub-question 2:** total concerts\n        * **Analysis:** We need to count all concerts in the `concert` table.\n        * **Pseudo SQL:** SELECT COUNT(*) FROM `concert`\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (concerts in the top 3 stadiums):**\n    * **SQL:** SELECT `Stadium_ID` FROM `stadium` ORDER BY (`Average` / `Capacity`) DESC LIMIT 3\n\n* **Sub-question 2 (total concerts):**\n    * **SQL:** SELECT COUNT(*) FROM `concert`\n\n* **Main Question (percentage of concerts in top 3 stadiums):**\n    * **SQL:** SELECT (COUNT(T1.concert_ID) / (SELECT COUNT(*) FROM concert)) * 100 AS percentage FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY (Average / Capacity) DESC LIMIT 3)\n\n**3. Simplification and Optimization:**\n\n* The final SQL query can be simplified by directly joining the `concert` and `stadium` tables and filtering for the top three stadiums based on average attendance.\n\n**Final Optimized SQL Query:**\n\n"
            }
        ],
        "status": "success",
        "execution_time": 20.4
    },
    {
        "tool_name": "revise",
        "original_SQL_id": "generate_candidate",
        "refined_SQL_id": "revise_1",
        "candidates": [
            {
                "refined_query": " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) "
            },
            {
                "refined_query": " SELECT (COUNT(CASE WHEN C.Stadium_ID IN (SELECT S.Stadium_ID FROM (SELECT S.Stadium_ID, SUM(S.Capacity) / COUNT(C.concert_ID) AS average_attendance_rate FROM stadium AS S INNER JOIN concert AS C ON S.Stadium_ID = C.Stadium_ID GROUP BY S.Stadium_ID ORDER BY average_attendance_rate DESC LIMIT 3) AS Top3) THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM concert AS C "
            },
            {
                "refined_query": " SELECT (COUNT(T1.concert_ID) * 100.0 / (SELECT COUNT(*) FROM concert)) AS percentage FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Stadium_ID IN (SELECT Stadium_ID FROM stadium ORDER BY (Average * 1.0 / Capacity) DESC LIMIT 3) "
            }
        ],
        "status": "success",
        "execution_time": 9.7
    },
    {
        "tool_name": "execution_accuracy",
        "generate_candidate": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?",
            "Evidence": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium.",
            "GOLD_SQL": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
            "PREDICTED_SQL": " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) "
        },
        "revise_1": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?",
            "Evidence": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium.",
            "GOLD_SQL": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
            "PREDICTED_SQL": " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) "
        },
        "final_SQL": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "What percentage of concerts took place in the three stadiums with the highest average attendance rates, assuming that the concert with the theme \"Bleeding Love\" took place at the Glebe Park stadium?",
            "Evidence": "Attendance rate is calculated by divding attendance amount by the capacity of the stadium.",
            "GOLD_SQL": "SELECT 100.0 * COUNT ( * ) / ( SELECT COUNT ( * ) FROM concert ) AS percent FROM ( SELECT Stadium_ID FROM stadium WHERE Name = \"Glebe Park\" UNION ALL SELECT Stadium_ID FROM concert WHERE Theme != \"Bleeding Love\" ) WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium ORDER BY 100.0 * Average / Capacity DESC LIMIT 3 )",
            "PREDICTED_SQL": " SELECT (COUNT(T1.concert_ID) * 1.0 / (SELECT COUNT(concert_ID) FROM concert)) * 100 AS percentage  FROM concert AS T1  WHERE Stadium_ID IN (SELECT Stadium_ID                       FROM (SELECT T2.Stadium_ID, COUNT(T1.concert_ID) * 1.0 / T2.Capacity AS average_attendance                             FROM concert AS T1                             INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID                             GROUP BY T1.Stadium_ID                             ORDER BY average_attendance DESC                             LIMIT 3)) "
        },
        "status": "success",
        "execution_time": 0.0
    }
]