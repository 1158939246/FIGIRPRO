[
    {
        "tool_name": "extract_keywords",
        "keywords": [
            "Justin Brown",
            "John Nizinik",
            "total expenditure",
            "singers",
            "concerts",
            "Somerset Park stadium",
            "born before 1980",
            "$355",
            "born after 1980",
            "$228",
            "age",
            "date of birth"
        ],
        "status": "success",
        "execution_time": 1.5
    },
    {
        "tool_name": "retrieve_entity",
        "similar_columns": {
            "singer": [
                "Age"
            ]
        },
        "schema_with_examples": {
            "stadium": {
                "Name": [
                    "Somerset Park"
                ]
            },
            "singer": {
                "Name": [
                    "Justin Brown",
                    "John Nizinik"
                ]
            }
        },
        "status": "success",
        "execution_time": 2.7
    },
    {
        "tool_name": "retrieve_context",
        "schema_with_descriptions": {},
        "status": "success",
        "execution_time": 21.1
    },
    {
        "tool_name": "filter_column",
        "tentative_schema": {
            "stadium": [
                "Name"
            ],
            "singer": [
                "Singer_ID",
                "Name",
                "Age"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "singer_in_concert": []
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'",
            "'singer_in_concert'.'concert_id'",
            "'singer_in_concert'.'singer_id'",
            "'stadium'.'stadium_id'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 17.0
    },
    {
        "tool_name": "select_tables",
        "chain_of_thought_reasoning": "To answer the question about the total expenditure on paying singers for concerts held at Somerset Park stadium, we need to gather information from multiple tables. The 'singer' table is essential because it contains the names and ages of the singers, which is crucial for determining their earnings based on their birth years. The 'singer_in_concert' table is necessary to link singers to specific concerts, allowing us to identify which singers performed at the concerts. Finally, the 'concert' table is required to find out which concerts were held at Somerset Park stadium, as it contains the stadium information linked to each concert. The 'stadium' table is also needed to confirm the specific stadium name, Somerset Park, and its corresponding ID. Therefore, all four tables are necessary to construct the SQL query that calculates the total expenditure on paying singers for the concerts held at Somerset Park.",
        "selected_tables": [
            "singer",
            "singer_in_concert",
            "concert",
            "stadium"
        ],
        "tentative_schema": {
            "singer": [
                "Singer_ID",
                "Name",
                "Age"
            ],
            "singer_in_concert": [],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "stadium": [
                "Name"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'",
            "'singer_in_concert'.'concert_id'",
            "'singer_in_concert'.'singer_id'",
            "'stadium'.'stadium_id'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 30.4
    },
    {
        "tool_name": "select_columns",
        "chain_of_thought_reasoning": "To answer the question, we need to identify the singers' ages to determine their earnings based on their birth years. We also need to link the singers to the concerts they performed at Somerset Park stadium to calculate the total expenditure. The relevant columns include the singers' names and ages from the 'singer' table, the concert IDs from the 'singer_in_concert' table, and the stadium ID from the 'concert' table to filter for concerts held at Somerset Park.",
        "selected_columns": {
            "singer": [
                "Name",
                "Age",
                "Singer_ID"
            ],
            "singer_in_concert": [
                "concert_ID",
                "Singer_ID"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "stadium": [
                "Stadium_ID",
                "Name"
            ]
        },
        "tentative_schema": {
            "singer": [
                "Name",
                "Age",
                "Singer_ID"
            ],
            "singer_in_concert": [
                "concert_ID",
                "Singer_ID"
            ],
            "concert": [
                "concert_ID",
                "Stadium_ID"
            ],
            "stadium": [
                "Stadium_ID",
                "Name"
            ]
        },
        "missing_table_status": "success",
        "missing_tables": [],
        "missing_column_status": "missing_column",
        "missing_columns": [
            "'singer'.'John Nizinik'",
            "'singer'.'%Y'",
            "'singer'.'now'",
            "'singer'.'Justin Brown'"
        ],
        "correct_columns": {
            "singer": [
                "age",
                "name",
                "John Nizinik",
                "%Y",
                "now",
                "singer_id",
                "Justin Brown"
            ],
            "concert": [
                "concert_id",
                "stadium_id"
            ],
            "singer_in_concert": [
                "concert_id",
                "singer_id"
            ],
            "stadium": [
                "stadium_id",
                "name"
            ]
        },
        "status": "success",
        "execution_time": 7.0
    },
    {
        "tool_name": "generate_candidate",
        "node_type": "generate_candidate",
        "generation_based_candidates": [
            {
                "template_name": "generate_candidate_one",
                "candidates": [
                    " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') ",
                    " SELECT SUM(CASE WHEN STRFTIME('%Y', date('now')) - singer.Song_release_year < 1980 THEN 355 ELSE 228 END)  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') ",
                    " SELECT SUM(CASE WHEN STRFTIME('%Y', 'now') - T1.Age < 1980 THEN 355 ELSE 228 END) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park' "
                ]
            }
        ],
        "candidates": [
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') ",
                "plan": "**Question**: If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What was the total expenditure on paying singers for concerts held at Somerset Park stadium?\n    * **Analysis:** We need to calculate the total expenditure based on the age of the singers and the concerts they performed at Somerset Park. We will need to join the `singer`, `singer_in_concert`, `concert`, and `stadium` tables to get the necessary information.\n    * **Pseudo SQL:** SELECT SUM(<expenditure>) FROM <joined tables> WHERE <conditions>\n\n    * **Sub-question 1:** Calculate expenditure based on age\n        * **Analysis:** We need to determine the age of each singer and apply the corresponding payment based on whether they were born before or after 1980.\n        * **Pseudo SQL:** CASE WHEN <age condition> THEN 355 ELSE 228 END AS expenditure\n\n    * **Sub-question 2:** Join necessary tables\n        * **Analysis:** We need to join the `singer`, `singer_in_concert`, `concert`, and `stadium` tables to filter for concerts held at Somerset Park.\n        * **Pseudo SQL:** FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park'\n\n    * **Sub-question 3:** Determine the age of Justin Brown and John Nizinik\n        * **Analysis:** We need to find the ages of both singers and apply the condition that Justin Brown is 3 years older than John Nizinik.\n        * **Pseudo SQL:** SELECT Age FROM `singer` WHERE Name = 'Justin Brown' AND Age = (SELECT Age + 3 FROM `singer` WHERE Name = 'John Nizinik')\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (calculate expenditure based on age):**\n    * **SQL:** CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END AS expenditure\n\n* **Sub-question 2 (join necessary tables):**\n    * **SQL:** FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park'\n\n* **Sub-question 3 (determine ages):**\n    * **SQL:** SELECT Age FROM `singer` WHERE Name = 'Justin Brown' AND Age = (SELECT Age + 3 FROM `singer` WHERE Name = 'John Nizinik')\n\n* **Main Question (total expenditure):**\n    * **SQL:** SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END) FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park' AND T1.Age = (SELECT Age FROM `singer` WHERE Name = 'Justin Brown') AND T1.Age = (SELECT Age + 3 FROM `singer` WHERE Name = 'John Nizinik')\n\n**3. Simplification and Optimization:**\n\n* The final SQL query can be simplified by directly calculating the ages of both singers in the main query without needing to repeat the sub-query for age determination.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN STRFTIME('%Y', date('now')) - singer.Song_release_year < 1980 THEN 355 ELSE 228 END)  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') ",
                "plan": "**Question**: If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What was the total expenditure on paying singers for concerts held at Somerset Park stadium?\n    * **Analysis:** We need to calculate the total expenditure based on the age of the singers and the concerts held at Somerset Park. This involves joining the `singer`, `singer_in_concert`, and `concert` tables, filtering for concerts at Somerset Park, and calculating the payment based on the birth year of the singers.\n    * **Pseudo SQL:** SELECT SUM(<payment>) FROM <joined tables> WHERE <concerts at Somerset Park>\n\n    * **Sub-question 1:** payment calculation based on age\n        * **Analysis:** We need to determine the payment based on the birth year of the singers. If the singer was born before 1980, they earn $355; otherwise, they earn $228.\n        * **Pseudo SQL:** CASE WHEN <birth year < 1980> THEN 355 ELSE 228 END\n\n    * **Sub-question 2:** concerts held at Somerset Park\n        * **Analysis:** We need to filter the concerts based on the stadium name, which is 'Somerset Park'. This requires joining the `concert` table with the `stadium` table.\n        * **Pseudo SQL:** `concert.Stadium_ID` = (SELECT `Stadium_ID` FROM `stadium` WHERE `Name` = 'Somerset Park')\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (payment calculation based on age):**\n    * **SQL:** CASE WHEN STRFTIME('%Y', date('now')) - `singer`.`Song_release_year` < 1980 THEN 355 ELSE 228 END\n\n* **Sub-question 2 (concerts held at Somerset Park):**\n    * **SQL:** `concert.Stadium_ID` = (SELECT `Stadium_ID` FROM `stadium` WHERE `Name` = 'Somerset Park')\n\n* **Main Question (total expenditure):**\n    * **SQL:** SELECT SUM(CASE WHEN STRFTIME('%Y', date('now')) - `singer`.`Song_release_year` < 1980 THEN 355 ELSE 228 END) \n      FROM `singer` \n      INNER JOIN `singer_in_concert` ON `singer`.`Singer_ID` = `singer_in_concert`.`Singer_ID` \n      INNER JOIN `concert` ON `singer_in_concert`.`concert_ID` = `concert`.`concert_ID` \n      WHERE `concert`.`Stadium_ID` = (SELECT `Stadium_ID` FROM `stadium` WHERE `Name` = 'Somerset Park')\n\n**3. Simplification and Optimization:**\n\n* The SQL query from step 2 can be simplified by ensuring that we directly calculate the total expenditure in a single query without unnecessary nesting.\n\n**Final Optimized SQL Query:**\n\n"
            },
            {
                "chain_of_thought_reasoning": "",
                "SQL": " SELECT SUM(CASE WHEN STRFTIME('%Y', 'now') - T1.Age < 1980 THEN 355 ELSE 228 END) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park' ",
                "plan": "**Question**: If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?  \n**Evidence**: Age is calculated by subtracting date of birth from a given date.\n\n**1. Divide and Conquer:**\n\n* **Main Question:** What was the total expenditure on paying singers for concerts held at Somerset Park stadium?\n    * **Analysis:** We need to calculate the total expenditure based on the age of the singers and the concerts they performed at Somerset Park. This involves joining the `singer`, `singer_in_concert`, `concert`, and `stadium` tables. We will also need to determine the earnings based on the birth year of the singers.\n    * **Pseudo SQL:** SELECT SUM(<earnings>) FROM <joined tables> WHERE <conditions for Somerset Park and age-based earnings>\n\n    * **Sub-question 1:** Earnings based on age\n        * **Analysis:** We need to determine the earnings based on whether the singer was born before or after 1980. This can be done using a CASE statement.\n        * **Pseudo SQL:** CASE WHEN <birth year condition> THEN 355 ELSE 228 END\n\n    * **Sub-question 2:** Join tables to get relevant data\n        * **Analysis:** We need to join the `singer`, `singer_in_concert`, `concert`, and `stadium` tables to filter for concerts held at Somerset Park.\n        * **Pseudo SQL:** SELECT * FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park'\n\n**2. Assembling SQL:**\n\n* **Sub-question 1 (earnings based on age):**\n    * **SQL:** CASE WHEN STRFTIME('%Y', 'now') - T1.Age < 1980 THEN 355 ELSE 228 END\n\n* **Sub-question 2 (join tables):**\n    * **SQL:** SELECT T1.Singer_ID, T1.Age FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park'\n\n* **Main Question (total expenditure):**\n    * **SQL:** SELECT SUM(CASE WHEN STRFTIME('%Y', 'now') - T1.Age < 1980 THEN 355 ELSE 228 END) FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN `concert` AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `stadium` AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park'\n\n**3. Simplification and Optimization:**\n\n* The SQL query from step 2 is already efficient. We have used `INNER JOIN` to combine the necessary tables and applied the conditions directly in the `WHERE` clause.\n\n**Final Optimized SQL Query:**\n\n"
            }
        ],
        "status": "success",
        "execution_time": 12.1
    },
    {
        "tool_name": "revise",
        "original_SQL_id": "generate_candidate",
        "refined_SQL_id": "revise_1",
        "candidates": [
            {
                "refined_query": " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') "
            },
            {
                "refined_query": " SELECT SUM(CASE WHEN STRFTIME('%Y', date('now')) - singer.Song_release_year < 1980 THEN 355 ELSE 228 END)  FROM singer  INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID  INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID  WHERE concert.Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Name = 'Somerset Park') "
            },
            {
                "refined_query": " SELECT SUM(CASE WHEN STRFTIME('%Y', 'now') - T1.Age < 1980 THEN 355 ELSE 228 END) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Name = 'Somerset Park' "
            }
        ],
        "status": "success",
        "execution_time": 0.1
    },
    {
        "tool_name": "execution_accuracy",
        "generate_candidate": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') "
        },
        "revise_1": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') "
        },
        "final_SQL": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Question": "If Justin Brown was 3 years older than John Nizinik, what was the total expenditure on paying singers for concerts held at Somerset Park stadium, given that singers born before 1980 earned $355 per concert and those born after 1980 earned $228 per concert?",
            "Evidence": "Age is calculated by substracting date of birth from a given date.",
            "GOLD_SQL": "SELECT p1 + p2 AS cost FROM ( SELECT 355 * ( COUNT ( * ) ) AS p1 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year < 1980 ) JOIN ( SELECT 228 * ( COUNT ( * ) ) AS p2 FROM concert A JOIN singer_in_concert B ON A.concert_ID = B.concert_ID JOIN ( SELECT Singer_ID , Name , strftime ( \"%Y\" , \"now\" ) - Age AS birth_year FROM singer WHERE Name != \"Justin Brown\" UNION ALL SELECT Singer_ID , Name , ( SELECT strftime ( \"%Y\" , \"now\" ) - Age FROM singer WHERE Name = \"John Nizinik\" ) - 3 AS birth_year FROM singer WHERE Name = \"Justin Brown\" ) C ON B.Singer_ID = C.Singer_ID JOIN stadium D ON A.Stadium_ID = D.Stadium_ID WHERE D.Name = \"Somerset Park\" AND C.birth_year >= 1980 )",
            "PREDICTED_SQL": " SELECT SUM(CASE WHEN (STRFTIME('%Y', 'now') - T1.Age) < 1980 THEN 355 ELSE 228 END)  FROM singer AS T1  INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID  INNER JOIN stadium AS T4 ON T3.Stadium_ID = T4.Stadium_ID  WHERE T4.Name = 'Somerset Park'  AND T1.Age = (SELECT Age FROM singer WHERE Name = 'Justin Brown')  AND T1.Age = (SELECT Age + 3 FROM singer WHERE Name = 'John Nizinik') "
        },
        "status": "success",
        "execution_time": 0.0
    }
]